{"version":3,"sources":["webpack://[name]/webpack/universalModuleDefinition","webpack://[name]/webpack/bootstrap","webpack://[name]/./src/transform/transform.ts","webpack://[name]/./src/index.ts","webpack://[name]/./src/download/download.ts","webpack://[name]/./src/player/player.ts","webpack://[name]/./src/exception/exception.ts","webpack://[name]/./src/recorder/recorder.ts"],"names":["root","factory","exports","module","define","amd","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","writeString","data","offset","str","length","setUint8","charCodeAt","inputSampleRate","outputSampleRate","rate","compression","Math","max","lData","left","rData","right","floor","result","Float32Array","index","j","temp","bytes","sampleBits","littleEdian","dataLength","buffer","ArrayBuffer","DataView","val","min","setInt8","setInt16","numChannels","oututSampleBits","sampleRate","byteLength","channelCount","setUint32","setUint16","getUint8","options","isrecording","ispause","isplaying","setOption","setNewOption","start","Promise","reject","startRecord","pause","pauseRecord","resume","resumeRecord","stop","stopRecord","play","onplay","addPlayEnd","onplayend","dataV","getWAV","getPlayTime","pausePlay","onpauseplay","resumePlay","onresumeplay","stopPlay","onstopplay","destroy","destroyPlay","destroyRecord","getRecordAnalyseData","getAnalyseData","getPlayAnalyseData","getPCM","getData","compress","encodePCM","getPCMBlob","Blob","downloadPCM","pcmBlob","pcmTemp","encodeWAV","config","getWAVBlob","type","downloadWAV","wavBlob","download","blob","getChannelData","all","res","lD","rD","getInt16","getInt8","Index","_download","oA","document","createElement","href","window","URL","createObjectURL","click","wavblob","source","playTime","playStamp","context","analyser","audioData","isPaused","totalTime","endplayFn","playAudio","decodeAudioData","slice","createBufferSource","onended","currentTime","connect","destination","e","throwError","destroySource","arraybuffer","AudioContext","webkitAudioContext","createAnalyser","fftSize","dataArray","Uint8Array","frequencyBinCount","getByteTimeDomainData","fn","pTime","message","Error","size","lBuffer","rBuffer","tempPCM","inputSampleBits","fileSize","duration","needRecord","Int16Array","Recorder","initUserMedia","indexOf","initRecorder","navigator","mediaDevices","getUserMedia","audio","then","stream","audioInput","createMediaStreamSource","recorder","disconnect","clearRecordStatus","stopStream","closeAudioContext","getFloatTimeDomainData","getFrequencyData","getByteFrequencyData","getAverageVolume","array","values","flat","PCM","set","createScript","createScriptProcessor","createJavaScriptNode","apply","onaudioprocess","vol","inputBuffer","push","onprocess","onprogress","getTracks","forEach","track","close","state","resolve","undefined","constraints","webkitGetUserMedia","mozGetUserMedia","transformIntoPCM","getPermission"],"mappings":"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","file":"recorder.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Recorder\"] = factory();\n\telse\n\t\troot[\"Recorder\"] = factory();\n})(this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","interface dataview {\n    byteLength: number,\n    buffer: {\n        byteLength: number,\n    },\n    getUint8: any,\n}\n\n/**\n * 在data中的offset位置开始写入str字符串\n * @param {TypedArrays} data    二进制数据\n * @param {Number}      offset  偏移量\n * @param {String}      str     字符串\n */\nfunction writeString(data, offset, str): void {\n    for (let i = 0; i < str.length; i++) {\n        data.setUint8(offset + i, str.charCodeAt(i));\n    }\n}\n\n/**\n * 数据合并压缩\n * 根据输入和输出的采样率压缩数据，\n * 比如输入的采样率是48k的，我们需要的是（输出）的是16k的，由于48k与16k是3倍关系，\n * 所以输入数据中每隔3取1位\n *\n * @param {float32array} data       [-1, 1]的pcm数据\n * @param {number} inputSampleRate  输入采样率\n * @param {number} outputSampleRate 输出采样率\n * @returns  {float32array}         压缩处理后的二进制数据\n */\nexport function compress(data, inputSampleRate: number, outputSampleRate: number) {\n    // 压缩，根据采样率进行压缩\n    let rate = inputSampleRate / outputSampleRate,\n        compression = Math.max(rate, 1),\n        lData = data.left,\n        rData = data.right,\n        length = Math.floor(( lData.length + rData.length ) / rate),\n        result = new Float32Array(length),\n        index = 0,\n        j = 0;\n\n    // 循环间隔 compression 位取一位数据\n    while (index < length) {\n        // 取整是因为存在比例compression不是整数的情况\n        let temp = Math.floor(j);\n\n        result[index] = lData[temp];\n        index++;\n\n        if (rData.length) {\n            /*\n            * 双声道处理\n            * e.inputBuffer.getChannelData(0)得到了左声道4096个样本数据，1是右声道的数据，\n            * 此处需要组和成LRLRLR这种格式，才能正常播放，所以要处理下\n            */\n            result[index] = rData[temp];\n            index++;\n        }\n\n        j += compression;\n    }\n    // 返回压缩后的一维数据\n    return result;\n}\n\n/**\n * 转换到我们需要的对应格式的编码\n *\n * @param {float32array} bytes      pcm二进制数据\n * @param {number}  sampleBits      采样位数\n * @param {boolean} littleEdian     是否是小端字节序\n * @returns {dataview}              pcm二进制数据\n */\nexport function encodePCM(bytes, sampleBits: number, littleEdian: boolean = true) {\n    let offset = 0,\n        dataLength = bytes.length * (sampleBits / 8),\n        buffer = new ArrayBuffer(dataLength),\n        data = new DataView(buffer);\n\n    // 写入采样数据\n    if (sampleBits === 8) {\n        for (let i = 0; i < bytes.length; i++, offset++) {\n            // 范围[-1, 1]\n            let s = Math.max(-1, Math.min(1, bytes[i]));\n            // 8位采样位划分成2^8=256份，它的范围是0-255;\n            // 对于8位的话，负数*128，正数*127，然后整体向上平移128(+128)，即可得到[0,255]范围的数据。\n            let val = s < 0 ? s * 128 : s * 127;\n            val = +val + 128;\n            data.setInt8(offset, val);\n        }\n    } else {\n        for (let i = 0; i < bytes.length; i++, offset += 2) {\n            let s = Math.max(-1, Math.min(1, bytes[i]));\n            // 16位的划分的是2^16=65536份，范围是-32768到32767\n            // 因为我们收集的数据范围在[-1,1]，那么你想转换成16位的话，只需要对负数*32768,对正数*32767,即可得到范围在[-32768,32767]的数据。\n            data.setInt16(offset, s < 0 ? s * 0x8000 : s * 0x7FFF, littleEdian);\n        }\n    }\n\n    return data;\n}\n\n/**\n * 编码wav，一般wav格式是在pcm文件前增加44个字节的文件头，\n * 所以，此处只需要在pcm数据前增加下就行了。\n *\n * @param {DataView} bytes           pcm二进制数据\n * @param {number}  inputSampleRate  输入采样率\n * @param {number}  outputSampleRate 输出采样率\n * @param {number}  numChannels      声道数\n * @param {number}  oututSampleBits  输出采样位数\n * @param {boolean} littleEdian      是否是小端字节序\n * @returns {DataView}               wav二进制数据\n */\nexport function encodeWAV(bytes: dataview, inputSampleRate: number, outputSampleRate: number, numChannels: number, oututSampleBits: number, littleEdian: boolean = true) {\n    let sampleRate = outputSampleRate > inputSampleRate ? inputSampleRate : outputSampleRate,   // 输出采样率较大时，仍使用输入的值，\n        sampleBits = oututSampleBits,\n        buffer = new ArrayBuffer(44 + bytes.byteLength),\n        data = new DataView(buffer),\n        channelCount = numChannels, // 声道\n        offset = 0;\n\n    // 资源交换文件标识符\n    writeString(data, offset, 'RIFF'); offset += 4;\n    // 下个地址开始到文件尾总字节数,即文件大小-8\n    data.setUint32(offset, 36 + bytes.byteLength, littleEdian); offset += 4;\n    // WAV文件标志\n    writeString(data, offset, 'WAVE'); offset += 4;\n    // 波形格式标志\n    writeString(data, offset, 'fmt '); offset += 4;\n    // 过滤字节,一般为 0x10 = 16\n    data.setUint32(offset, 16, littleEdian); offset += 4;\n    // 格式类别 (PCM形式采样数据)\n    data.setUint16(offset, 1, littleEdian); offset += 2;\n    // 声道数\n    data.setUint16(offset, channelCount, littleEdian); offset += 2;\n    // 采样率,每秒样本数,表示每个通道的播放速度\n    data.setUint32(offset, sampleRate, littleEdian); offset += 4;\n    // 波形数据传输率 (每秒平均字节数) 声道数 × 采样频率 × 采样位数 / 8\n    data.setUint32(offset, channelCount * sampleRate * (sampleBits / 8), littleEdian); offset += 4;\n    // 快数据调整数 采样一次占用字节数 声道数 × 采样位数 / 8\n    data.setUint16(offset, channelCount * (sampleBits / 8), littleEdian); offset += 2;\n    // 采样位数\n    data.setUint16(offset, sampleBits, littleEdian); offset += 2;\n    // 数据标识符\n    writeString(data, offset, 'data'); offset += 4;\n    // 采样数据总数,即数据总大小-44\n    data.setUint32(offset, bytes.byteLength, littleEdian); offset += 4;\n\n    // 给wav头增加pcm体\n    for (let i = 0; i < bytes.byteLength;) {\n        data.setUint8(offset, bytes.getUint8(i));\n        offset++;\n        i++;\n    }\n\n    return data;\n}\n","import { downloadPCM, downloadWAV, download } from './download/download';\nimport { compress, encodePCM, encodeWAV } from './transform/transform';\nimport Player from './player/player';\nimport Recorder from './recorder/recorder';\n\ndeclare let window: any;\ndeclare let Math: any;\ndeclare let navigator: any;\ndeclare let Promise: any;\n\n// 构造函数参数格式\ninterface recorderConfig {\n    sampleBits?: number,        // 采样位数\n    sampleRate?: number,        // 采样率\n    numChannels?: number,       // 声道数\n    compiling?: boolean,        // 是否边录边播\n}\n\nclass Index extends Recorder {\n    private isrecording: boolean = false;       // 是否正在录音\n    private ispause: boolean = false;           // 是否是暂停\n    private isplaying: boolean = false;         // 是否正在播放\n\n    public onplay: () => void;                  // 音频播放回调\n    public onpauseplay: () => void;             // 音频暂停回调\n    public onresumeplay: () => void;            // 音频恢复播放回调\n    public onstopplay: () => void;              // 音频停止播放回调\n    public onplayend: () => void;               // 音频正常播放结束\n    /**\n     * @param {Object} options 包含以下三个参数：\n     * sampleBits，采样位数，一般8,16，默认16\n     * sampleRate，采样率，一般 11025、16000、22050、24000、44100、48000，默认为浏览器自带的采样率\n     * numChannels，声道，1或2\n     */\n    constructor(options: recorderConfig = {}) {\n        super(options);\n    }\n\n    /**\n     * 重新修改配置\n     *\n     * @param {recorderConfig} [options={}]\n     * @memberof Recorder\n     */\n    public setOption(options: recorderConfig = {}) {\n        this.setNewOption(options);\n    }\n\n    /**\n     * Start the recording\n     */\n    start(): Promise<{}> {\n        if (this.isrecording) {\n            // 正在录音，则不允许\n            return Promise.reject();\n        }\n\n        this.isrecording = true;\n\n        return this.startRecord();\n    }\n\n    /**\n     * Pause the recording\n     */\n    pause(): void {\n        if (this.isrecording && !this.ispause) {\n            this.ispause = true;\n            // 当前不暂停的时候才可以暂停\n            this.pauseRecord();\n        }\n    }\n\n    /**\n     * 继续录音\n     */\n    resume(): void {\n        if (this.isrecording && this.ispause) {\n            this.ispause = false;\n            this.resumeRecord();\n        }\n    }\n\n    /**\n     * 停止录音\n     *\n     * @memberof Recorder\n     */\n    stop(): void {\n        if (this.isrecording) {\n            this.isrecording = false;\n            this.ispause = false;\n            this.stopRecord();\n        }\n    }\n\n    /**\n     * 播放录音\n     */\n    play(): void {\n        this.stop();\n        // 关闭前一次音频播放\n        this.isplaying = true;\n\n        this.onplay && this.onplay();\n        Player.addPlayEnd(this.onplayend);  // 注册播放完成后的回调事件\n\n        const dataV = this.getWAV();\n\n        if (dataV.byteLength > 44) {\n            Player.play(dataV.buffer);  // 播放\n        }\n    }\n\n    /**\n     * 获取已经播放了多长时间\n     */\n    getPlayTime(): number {\n        return Player.getPlayTime();\n    }\n\n    /**\n     * 暂停播放录音\n     *\n     * @memberof Recorder\n     */\n    pausePlay(): void {\n        if (this.isrecording || !this.isplaying) {\n            // 正在录音或没有播放，暂停无效\n            return;\n        }\n\n        this.isplaying = false;\n        this.onpauseplay && this.onpauseplay();\n        Player.pausePlay();\n    }\n\n    /**\n     * 恢复播放录音\n     *\n     * @memberof Recorder\n     */\n    resumePlay(): void {\n        if (this.isrecording || this.isplaying) {\n            // 正在录音或已经播放或没开始播放，恢复无效\n            return;\n        }\n\n        this.isplaying = true;\n        this.onresumeplay && this.onresumeplay();\n        Player.resumePlay();\n    }\n\n    /**\n     * 停止播放\n     *\n     * @memberof Recorder\n     */\n    stopPlay(): void {\n        if (this.isrecording) {\n            // 正在录音，停止录音播放无效\n            return;\n        }\n\n        this.isplaying = false;\n        this.onstopplay && this.onstopplay();\n        Player.stopPlay();\n    }\n\n    destroy(): Promise<{}> {\n        Player.destroyPlay();\n\n        return this.destroyRecord();\n    }\n\n    /**\n     * 获取当前已经录音的PCM音频数据\n     *\n     * @returns[DataView]\n     * @memberof Recorder\n     */\n    // getWholeData() {\n    //     return this.tempPCM;\n    // }\n\n    /**\n     * 获取余下的新数据，不包括 getNextData 前一次获取的数据\n     *\n     * @returns [DataView]\n     * @memberof Recorder\n     */\n    // getNextData() {\n    //     let length = this.tempPCM.length,\n    //         data = this.tempPCM.slice(this.offset);\n\n    //     this.offset = length;\n\n    //     return data;\n    // }\n\n    /**\n     * 获取当前录音的波形数据，\n     * 调取频率由外部控制。\n     *\n     * @memberof Recorder\n     */\n    getRecordAnalyseData(): any {\n        return this.getAnalyseData();\n    }\n\n    /**\n     * 获取录音播放时的波形数据，\n     *\n     * @memberof Recorder\n     */\n    getPlayAnalyseData(): any {\n        // 现在录音和播放不允许同时进行，所有复用的录音的analyser节点。\n        return Player.getAnalyseData();\n    }\n\n    getPCM(): any {\n        // 先停止\n        this.stop();\n        // 获取pcm数据\n        let data: any = this.getData();\n        // 根据输入输出比例 压缩或扩展\n        data = compress(data, this.inputSampleRate, this.outputSampleRate);\n        // 按采样位数重新编码\n        return encodePCM(data, this.oututSampleBits, this.littleEdian);\n    }\n\n    /**\n     * 获取PCM格式的blob数据\n     *\n     * @returns { blob }  PCM格式的blob数据\n     * @memberof Recorder\n     */\n    getPCMBlob(): any {\n        return new Blob([ this.getPCM() ]);\n    }\n\n    /**\n     * 下载录音pcm数据\n     *\n     * @param {string} [name='recorder']    重命名的名字\n     * @memberof Recorder\n     */\n    downloadPCM(name: string = 'recorder'): void {\n        let pcmBlob = this.getPCMBlob();\n\n        downloadPCM(pcmBlob, name);\n    }\n\n    /**\n     * 获取WAV编码的二进制数据(dataview)\n     *\n     * @returns {dataview}  WAV编码的二进制数据\n     * @memberof Recorder\n     */\n    getWAV(): any {\n        let pcmTemp = this.getPCM();\n\n        // PCM增加44字节的头就是WAV格式了\n        return encodeWAV(pcmTemp, this.inputSampleRate,\n            this.outputSampleRate, this.config.numChannels, this.oututSampleBits, this.littleEdian);;\n    }\n\n    /**\n     * 获取WAV音频的blob数据\n     *\n     * @returns { blob }    wav格式blob数据\n     * @memberof Recorder\n     */\n    getWAVBlob(): any {\n        return new Blob([ this.getWAV() ], { type: 'audio/wav' });\n    }\n\n    /**\n     * 下载录音的wav数据\n     *\n     * @param {string} [name='recorder']    重命名的名字\n     * @memberof Recorder\n     */\n    downloadWAV(name: string = 'recorder'): void {\n        let wavBlob = this.getWAVBlob();\n\n        downloadWAV(wavBlob, name);\n    }\n\n    /**\n     * 通用的下载接口\n     */\n    download(blob, name: string, type: string): void {\n        download(blob, name, type);\n    }\n\n    /**\n     * 获取左和右声道的数据\n     *\n     * @returns [DataView]\n     */\n    getChannelData(): any {\n        const all = this.getPCM();\n        const length = all.byteLength;\n        const littleEdian = this.littleEdian\n        const res = { left: null, right: null }\n\n        if (this.config.numChannels === 2) {\n            // 双通道,劈开\n            const lD = new DataView(new ArrayBuffer(length / 2))\n            const rD = new DataView(new ArrayBuffer(length / 2))\n            // 双声道，需要拆分下数据\n\n            if (this.config.sampleBits === 16) {\n                for (var i = 0; i < length / 2; i += 2) {\n                    lD.setInt16(i, all.getInt16(i * 2, littleEdian), littleEdian)\n                    rD.setInt16(i, all.getInt16(i * 2 + 2, littleEdian), littleEdian)\n                }\n            } else {\n                for (var i = 0; i < length / 2; i += 2) {\n                    lD.setInt8(i, all.getInt8(i * 2))\n                    rD.setInt8(i, all.getInt8(i * 2 + 1))\n                }\n            }\n\n            res.left = lD\n            res.right = rD\n        } else {\n            // 单通道\n            res.left = all\n        }\n\n        return res\n    }\n}\n\nexport default Index;\n","/**\n * 下载录音文件\n * @private\n * @param {*} blob      blob数据\n * @param {string} name 下载的文件名\n * @param {string} type 下载的文件后缀\n */\nfunction _download(blob, name: string, type: string): void {\n    let oA = document.createElement('a');\n\n    oA.href = window.URL.createObjectURL(blob);\n    oA.download = `${ name }.${ type }`;\n    oA.click();\n}\n\n/**\n * 下载录音的wav数据\n *\n * @param {blob}   需要下载的blob数据类型\n * @param {string} [name='recorder']    重命名的名字\n */\nexport function downloadWAV(wavblob, name: string = 'recorder'): void {\n    _download(wavblob, name, 'wav');\n}\n\n/**\n * 下载录音pcm数据\n *\n * @param {blob}   需要下载的blob数据类型\n * @param {string} [name='recorder']    重命名的名字\n * @memberof Recorder\n */\nexport function downloadPCM(pcmBlob, name: string = 'recorder'): void {\n    _download(pcmBlob, name, 'pcm');\n}\n\n// 通用下载接口\nexport function download(blob, name: string, type: string) {\n    return _download(blob, name, type)\n}\n","import { throwError } from '../exception/exception'\n\ndeclare let window: any;\n\nlet source: any = null;\nlet playTime: number = 0;       // 相对时间，记录暂停位置\nlet playStamp: number = 0;      // 开始或暂停后开始的时间戳(绝对)\nlet context: any = null;\nlet analyser: any = null;\n\nlet audioData: any = null;\n// let hasInit: boolean = false;           // 是否已经初始化了\nlet isPaused: boolean = false;\nlet totalTime: number = 0;\nlet endplayFn: any = function() {};\n\n/**\n * 初始化\n */\nfunction init(): void {\n    context = new (window.AudioContext || window.webkitAudioContext)();\n    analyser = context.createAnalyser();\n    analyser.fftSize = 2048;                   // 表示存储频域的大小\n}\n\n/**\n * play\n * @returns {Promise<{}>}\n */\nfunction playAudio(): Promise<{}> {\n    isPaused = false;\n\n    return context.decodeAudioData(audioData.slice(0), buffer => {\n        source = context.createBufferSource();\n\n        // 播放结束的事件绑定\n        source.onended = () => {\n            if (!isPaused) {  // 暂停的时候也会触发该事件\n                // 计算音频总时长\n                totalTime = context.currentTime - playStamp + playTime;\n                endplayFn();\n            }\n\n        }\n\n        // 设置数据\n        source.buffer = buffer;\n        // connect到分析器，还是用录音的，因为播放时不能录音的\n        source.connect(analyser);\n        analyser.connect(context.destination);\n        source.start(0, playTime);\n\n        // 记录当前的时间戳，以备暂停时使用\n        playStamp = context.currentTime;\n    }, function(e) {\n        throwError(e);\n    });\n}\n\n// 销毁source, 由于 decodeAudioData 产生的source每次停止后就不能使用，所以暂停也意味着销毁，下次需重新启动。\nfunction destroySource() {\n    if (source) {\n        source.stop();\n        source = null;\n    }\n}\n\nexport default class Player {\n    /**\n     * play record\n     * @static\n     * @param {ArrayBuffer} arraybuffer\n     * @memberof Player\n     */\n    static play(arraybuffer): Promise<{}> {\n        if (!context) {\n            // 第一次播放要初始化\n            init();\n        }\n        this.stopPlay();\n        // 缓存播放数据\n        audioData = arraybuffer;\n        totalTime = 0;\n\n        return playAudio();\n    }\n\n    /**\n     * 暂停播放录音\n     * @memberof Player\n     */\n    static pausePlay(): void {\n        destroySource();\n        // 多次暂停需要累加\n        playTime += context.currentTime - playStamp;\n        isPaused = true;\n    }\n\n    /**\n     * 恢复播放录音\n     * @memberof Player\n     */\n    static resumePlay(): Promise<{}> {\n        return playAudio();\n    }\n\n    /**\n     * 停止播放\n     * @memberof Player\n     */\n    static stopPlay() {\n        playTime = 0;\n        audioData = null;\n\n        destroySource();\n    }\n\n    static destroyPlay() {\n        this.stopPlay();\n    }\n\n    static getAnalyseData() {\n        let dataArray = new Uint8Array(analyser.frequencyBinCount);\n        // 将数据拷贝到dataArray中。\n        analyser.getByteTimeDomainData(dataArray);\n\n        return dataArray;\n    }\n\n    /**\n     * 增加录音播放完成的事件绑定\n     *\n     * @static\n     * @param {*} [fn=function() {}]\n     * @memberof Player\n     */\n    static addPlayEnd(fn: any = function() {}) {\n        endplayFn = fn;\n    }\n\n    // 获取已经播放的时长\n    static getPlayTime(): number {\n        let pTime = isPaused ? playTime : context.currentTime - playStamp + playTime;\n\n        return totalTime || pTime;\n    }\n}\n","/**\n * 异常处理\n * @static\n * @param {*} message   错误消息\n */\nexport function throwError(message: string) {\n    throw new Error(message);\n}\n","import {compress, encodePCM, encodeWAV} from '../transform/transform';\n\ndeclare let window: any;\ndeclare let Math: any;\ndeclare let navigator: any;\ndeclare let Promise: any;\n\n// 构造函数参数格式\ninterface recorderConfig {\n    sampleBits?: number,        // 采样位数\n    sampleRate?: number,        // 采样率\n    numChannels?: number,       // 声道数\n    compiling?: boolean,        // 是否边录边播\n}\n\nexport default class Recorder {\n    private context: any;\n    protected config: recorderConfig;               // 配置\n    private analyser: any;\n    private size: number = 0;                       // 录音文件总长度\n    private lBuffer: Array<Float32Array> = [];      // pcm音频数据搜集器(左声道)\n    private rBuffer: Array<Float32Array> = [];      // pcm音频数据搜集器(右声道)\n    private PCM: any;                               // 最终的PCM数据缓存，避免多次encode\n    private tempPCM: Array<DataView> = [];          // 边录边转时临时存放pcm的\n    private audioInput: any;\n    protected inputSampleRate: number;              // 输入采样率\n    protected inputSampleBits: number = 16;         // 输入采样位数\n    protected outputSampleRate: number;             // 输出采样率\n    protected oututSampleBits: number;              // 输出采样位数\n    private source: any;                            // 音频输入\n    private recorder: any;\n    private stream: any;                            // 流\n    protected littleEdian: boolean;                 // 是否是小端字节序\n    protected fileSize: number = 0;                 // 录音大小，byte为单位\n    protected duration: number = 0;                 // 录音时长\n    private needRecord: boolean = true;             // 由于safari问题，导致使用该方案代替disconnect/connect方案\n    // 正在录音时间，参数是已经录了多少时间了\n    public onprocess: (duration: number) => void;\n    // onprocess 替代函数，保持原来的 onprocess 向下兼容\n    public onprogress: (payload: {\n        duration: number,\n        fileSize: number,\n        vol: number,\n        // data: Array<DataView>,      // 当前存储的所有录音数据\n    }) => void;\n    public onplay: () => void;                  // 音频播放回调\n    public onpauseplay: () => void;             // 音频暂停回调\n    public onresumeplay: () => void;            // 音频恢复播放回调\n    public onstopplay: () => void;              // 音频停止播放回调\n    public onplayend: () => void;               // 音频正常播放结束\n\n    /**\n     * @param {Object} options 包含以下三个参数：\n     * sampleBits，采样位数，一般8,16，默认16\n     * sampleRate，采样率，一般 11025、16000、22050、24000、44100、48000，默认为浏览器自带的采样率\n     * numChannels，声道，1或2\n     */\n    constructor(options: recorderConfig = {}) {\n        // 临时audioContext，为了获取输入采样率的\n        let context = new (window.AudioContext || window.webkitAudioContext)();\n\n        this.inputSampleRate = context.sampleRate;     // 获取当前输入的采样率\n\n        // 设置输出配置\n        this.setNewOption(options);\n\n        // 判断端字节序\n        this.littleEdian = (function () {\n            let buffer = new ArrayBuffer(2);\n            new DataView(buffer).setInt16(0, 256, true);\n            return new Int16Array(buffer)[0] === 256;\n        })();\n        // 兼容 getUserMedia\n        Recorder.initUserMedia();\n    }\n\n    protected setNewOption(options: recorderConfig = {}) {\n        this.config = {\n            // 采样数位 8, 16\n            sampleBits: ~[8, 16].indexOf(options.sampleBits) ? options.sampleBits : 16,\n            // 采样率\n            sampleRate: ~[8000, 11025, 16000, 22050, 24000, 44100, 48000].indexOf(options.sampleRate) ? options.sampleRate : this.inputSampleRate,\n            // 声道数，1或2\n            numChannels: ~[1, 2].indexOf(options.numChannels) ? options.numChannels : 1,\n            // 是否需要边录边转，默认关闭，后期使用web worker\n            // compiling: !!options.compiling || false,   // 先移除\n        };\n        // 设置采样的参数\n        this.outputSampleRate = this.config.sampleRate;     // 输出采样率\n        this.oututSampleBits = this.config.sampleBits;      // 输出采样数位 8, 16\n    }\n\n    /**\n     * 开始录音\n     *\n     * @returns {Promise<{}>}\n     * @memberof Recorder\n     */\n    startRecord(): Promise<{}> {\n        if (this.context) {\n            // 关闭先前的录音实例，因为前次的实例会缓存少量前次的录音数据\n            this.destroyRecord();\n        }\n        // 初始化\n        this.initRecorder();\n\n        return navigator.mediaDevices.getUserMedia({\n            audio: true\n        }).then(stream => {\n            // audioInput表示音频源节点\n            // stream是通过navigator.getUserMedia获取的外部（如麦克风）stream音频输出，对于这就是输入\n            this.audioInput = this.context.createMediaStreamSource(stream);\n            this.stream = stream;\n        }/* 报错丢给外部使用者catch，后期可在此处增加建议性提示\n            , error => {\n            // 抛出异常\n            Recorder.throwError(error.name + \" : \" + error.message);\n        } */).then(() => {\n            // audioInput 为声音源，连接到处理节点 recorder\n            this.audioInput.connect(this.analyser);\n            this.analyser.connect(this.recorder);\n            // this.audioInput.connect(this.recorder);\n            // 处理节点 recorder 连接到扬声器\n            this.recorder.connect(this.context.destination);\n        });\n    }\n\n    /**\n     * 暂停录音\n     *\n     * @memberof Recorder\n     */\n    pauseRecord(): void {\n        this.needRecord = false;\n    }\n\n    /**\n     * 继续录音\n     *\n     * @memberof Recorder\n     */\n    resumeRecord(): void {\n        this.needRecord = true;\n    }\n\n    /**\n     * 停止录音\n     *\n     */\n    stopRecord(): void {\n        this.audioInput && this.audioInput.disconnect();\n        this.source && this.source.stop();\n        this.recorder.disconnect();\n        this.analyser.disconnect();\n        this.needRecord = true;\n    }\n\n    /**\n     * 销毁录音对象\n     *\n     */\n    destroyRecord(): Promise<{}> {\n        this.clearRecordStatus();\n        // 结束流\n        this.stopStream();\n        return this.closeAudioContext();\n    }\n\n    getAnalyseData() {\n        let dataArray = new Float32Array(this.analyser.fftSize);\n        // 将数据拷贝到dataArray中。\n        this.analyser.getFloatTimeDomainData(dataArray);\n        return dataArray;\n    }\n\n    getFrequencyData() {\n        let dataArray = new Uint8Array(this.analyser.frequencyBinCount);\n        // 将数据拷贝到dataArray中。\n        this.analyser.getByteFrequencyData(dataArray);\n        return dataArray;\n    }\n\n    getAverageVolume(array) {\n        let values = 0;\n        let average;\n        let length = array.length;\n\n        // get all the frequency amplitudes\n        for (let i = 0; i < length; i++) {\n            values += array[i];\n        }\n        average = values / length;\n        return average;\n    }\n\n    // 获取录音数据\n    getData() {\n        let data: any = this.flat();\n\n        return data;\n    }\n\n    /**\n     * 清除状态\n     *\n     */\n    private clearRecordStatus() {\n        this.lBuffer.length = 0;\n        this.rBuffer.length = 0;\n        this.size = 0;\n        this.fileSize = 0;\n        this.PCM = null;\n        this.audioInput = null;\n        this.duration = 0;\n    }\n\n    /**\n     * 将二维数组转一维\n     *\n     * @private\n     * @returns  {float32array}     音频pcm二进制数据\n     * @memberof Recorder\n     */\n    private flat() {\n        let lData = null,\n            rData = new Float32Array(0);    // 右声道默认为0\n\n        // 创建存放数据的容器\n        if (1 === this.config.numChannels) {\n            lData = new Float32Array(this.size);\n        } else {\n            lData = new Float32Array(this.size / 2);\n            rData = new Float32Array(this.size / 2);\n        }\n        // 合并\n        let offset = 0; // 偏移量计算\n\n        // 将二维数据，转成一维数据\n        // 左声道\n        for (let i = 0; i < this.lBuffer.length; i++) {\n            lData.set(this.lBuffer[i], offset);\n            offset += this.lBuffer[i].length;\n        }\n\n        offset = 0;\n        // 右声道\n        for (let i = 0; i < this.rBuffer.length; i++) {\n            rData.set(this.rBuffer[i], offset);\n            offset += this.rBuffer[i].length;\n        }\n\n        return {\n            left: lData,\n            right: rData\n        };\n    }\n\n    /**\n     * 初始化录音实例\n     */\n    private initRecorder(): void {\n        // 清空数据\n        this.clearRecordStatus();\n\n        this.context = new (window.AudioContext || window.webkitAudioContext)();\n\n        this.analyser = this.context.createAnalyser();  // 录音分析节点\n        this.analyser.fftSize = 512;                   // 表示存储频域的大小\n\n        // 第一个参数表示收集采样的大小，采集完这么多后会触发 onaudioprocess 接口一次，该值一般为1024,2048,4096等，一般就设置为4096\n        // 第二，三个参数分别是输入的声道数和输出的声道数，保持一致即可。\n        let createScript = this.context.createScriptProcessor || this.context.createJavaScriptNode;\n        this.recorder = createScript.apply(this.context, [4096, this.config.numChannels, this.config.numChannels]);\n\n        // 音频采集\n        this.recorder.onaudioprocess = e => {\n            if (!this.needRecord) {\n                return;\n            }\n            // 左声道数据\n            // getChannelData返回Float32Array类型的pcm数据\n            let lData = e.inputBuffer.getChannelData(0),\n                rData = null,\n                vol = 0;        // 音量百分比\n\n            this.lBuffer.push(new Float32Array(lData));\n\n            this.size += lData.length;\n\n            // 判断是否有右声道数据\n            if (2 === this.config.numChannels) {\n                rData = e.inputBuffer.getChannelData(1);\n                this.rBuffer.push(new Float32Array(rData));\n\n                this.size += rData.length;\n            }\n\n            // 边录边转处理 暂时不支持\n            // if (this.config.compiling) {\n            //     let pcm = this.transformIntoPCM(lData, rData);\n\n            //     this.tempPCM.push(pcm);\n            //     // 计算录音大小\n            //     this.fileSize = pcm.byteLength * this.tempPCM.length;\n            // } else {\n            // 计算录音大小\n            this.fileSize = Math.floor(this.size / Math.max(this.inputSampleRate / this.outputSampleRate, 1))\n                * (this.oututSampleBits / 8)\n            // }\n            // 为何此处计算大小需要分开计算。原因是先录后转时，是将所有数据一起处理，边录边转是单个 4096 处理，\n            // 有小数位的偏差。\n\n            // 计算音量百分比\n            vol = Math.max.apply(Math, lData) * 100;\n            // 统计录音时长\n            this.duration += 4096 / this.inputSampleRate;\n            // 录音时长回调\n            this.onprocess && this.onprocess(this.duration);\n            // 录音时长及响度回调\n            this.onprogress && this.onprogress({\n                duration: this.duration,\n                fileSize: this.fileSize,\n                vol,\n                // data: this.tempPCM,     // 当前所有的pcm数据，调用者控制增量\n            });\n        }\n    }\n\n    /**\n     * 终止流（这可以让浏览器上正在录音的标志消失掉）\n     * @private\n     * @memberof Recorder\n     */\n    private stopStream() {\n        if (this.stream && this.stream.getTracks) {\n            this.stream.getTracks().forEach(track => track.stop());\n            this.stream = null;\n        }\n    }\n\n    /**\n     * close兼容方案\n     * 如firefox 30 等低版本浏览器没有 close方法\n     */\n    private closeAudioContext() {\n        if (this.context && this.context.close && this.context.state !== 'closed') {\n            return this.context.close();\n        } else {\n            return new Promise((resolve) => {\n                resolve();\n            });\n        }\n    }\n\n    // getUserMedia 版本兼容\n    static initUserMedia() {\n        if (navigator.mediaDevices === undefined) {\n            navigator.mediaDevices = {};\n        }\n\n        if (navigator.mediaDevices.getUserMedia === undefined) {\n            navigator.mediaDevices.getUserMedia = function (constraints) {\n                let getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia;\n\n                if (!getUserMedia) {\n                    return Promise.reject(new Error('浏览器不支持 getUserMedia !'));\n                }\n\n                return new Promise(function (resolve, reject) {\n                    getUserMedia.call(navigator, constraints, resolve, reject);\n                });\n            }\n        }\n    }\n\n    /**\n     * 将获取到到左右声道的Float32Array数据编码转化\n     *\n     * @param {Float32Array} lData  左声道数据\n     * @param {Float32Array} rData  有声道数据\n     * @returns DataView\n     */\n    private transformIntoPCM(lData, rData) {\n        let lBuffer = new Float32Array(lData),\n            rBuffer = new Float32Array(rData);\n\n        let data = compress({\n            left: lBuffer,\n            right: rBuffer,\n        }, this.inputSampleRate, this.outputSampleRate);\n\n        return encodePCM(data, this.oututSampleBits, this.littleEdian);\n    }\n\n    static getPermission(): Promise<{}> {\n        this.initUserMedia();\n\n        return navigator.mediaDevices.getUserMedia({audio: true}).then((stream) => {\n            stream && stream.getTracks().forEach(track => track.stop());\n        });\n    }\n}\n"],"sourceRoot":""}